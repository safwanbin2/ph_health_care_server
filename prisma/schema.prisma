generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Models
model User {
  id          String @id @default(uuid())
  email       String @unique
  password    String
  role        UserRole
  needPasswordChange Boolean @default(true)
  status UserStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  admin Admin?
  doctor Doctor?
  patient Patient?

  @@map("users")
}

model Admin {
  id String @id @default(uuid())
  name String
  email String @unique 
  profilePhoto String?
  contactNumber String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Doctor {
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  address String?
  registrationNumber String
  experience Int @default(0)
  gender Gender
  appointmentFee Int
  qualification String
  currentWorkingPlace String
  designation String
  averageRating Float @default(0.0)
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [email], references: [email])
  doctorSpecialities DoctorSpecialities[]
  doctorSchedules DoctorSchedules[]
  appointment Appointment[]
  prescription Prescription[]
  review Review[]

  @@map("doctors")
}

model Patient {
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  address String?
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [email], references: [email])
  patientHealthData PatientHealthData?
  medicalReport MedicalReport[]
  appointment Appointment[]
  prescription Prescription[]
  review Review[]

  @@map("patients")
}

model Specialities {
  id String @id @default(uuid())
  title String
  icon String

  doctorSpecialities DoctorSpecialities[]

  @@map("specialities")
}

model DoctorSpecialities {
  doctorId String
  doctor Doctor @relation(fields: [doctorId], references: [id])

  specialityId String
  specialities Specialities @relation(fields: [specialityId], references: [id])

  @@id([doctorId, specialityId])

  @@map("doctor_specialities")
}

model PatientHealthData {
  id String @id @default(uuid())
  patientId String @unique
  patient Patient @relation(fields: [patientId], references: [id]) //!realtion
  dateOfBirth DateTime
  gender Gender
  bloodGroup BloodGroup
  hasAllergies Boolean
  hasDiabetes Boolean
  height String
  weight String
  smokingStatus Boolean
  dietryPreferences String
  pregnancyStatus Boolean
  mentalHealthHistory String
  immunizationStatus String
  hasPastSugeries Boolean
  recentAnxiety Boolean
  recentDepression Boolean
  maritalStatus MaritalStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicalReport {
  id String @id @default(uuid())
  patientId String
  patient Patient @relation(fields: [patientId], references: [id]) //!relation
  reportName String
  reportLink String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id String @id @default(uuid())
  startDate DateTime
  endDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctorSchedule DoctorSchedules[]
  appointment Appointment?

  @@map("schedules")
}

model DoctorSchedules {
  doctorId String
  doctor Doctor @relation(fields: [doctorId], references: [id])

  scheduleId String
  schedule Schedule @relation(fields: [scheduleId], references: [id])

  isBooked Boolean @default(false)
  appointmentId String? @unique
  appointment Appointment? @relation(fields: [appointmentId], references: [id]) 


  @@id([doctorId, scheduleId])
  @@map("doctor_schedules")
}


model Appointment {
  id String @id @default(uuid())

  patientId String
  patient Patient @relation(fields: [patientId], references: [id])

  doctorId String
  doctor Doctor @relation(fields: [doctorId], references: [id])

  scheduleId String @unique
  schedule Schedule @relation(fields: [scheduleId], references: [id])

  doctorSchedules DoctorSchedules?
  payment Payment?
  prescription Prescription?
  review Review?


  videoCallingId String
  status AppointmentStatus @default(SCHEDULED)
  paymentStatus PaymentStaus @default(UNPAID)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

model Payment {
  id String @id @default(uuid())
  appointmentId String @unique
  appointment Appointment @relation(fields: [appointmentId], references: [id])

  amount Float
  transactionId String @unique
  status PaymentStaus @default(UNPAID)
  paymentGatewayData Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Prescription {
  id String @id @default(uuid())

  appointmentId String @unique
  appointment Appointment @relation(fields: [appointmentId], references: [id])

  doctorId String
  doctor Doctor @relation(fields: [doctorId], references: [id])

  patientId String
  patient Patient @relation(fields: [patientId], references: [id])

  instructions String
  followUpDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("prescriptions")
}

model Review{
  id String @id @default(uuid())

  patientId String
  patient Patient @relation(fields: [patientId], references: [id])

  doctorId String
  doctor Doctor @relation(fields: [doctorId], references: [id])

  appointmentId String @unique
  appointment Appointment @relation(fields: [appointmentId], references: [id])

  rating Float
  comment String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("reviews")
}



//* Enums
enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}
enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}
enum Gender {
  MALE
  FEMALE
}

enum BloodGroup  {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}

enum AppointmentStatus {
  SCHEDULED
  INPROGRESS
  COMPLETED
  CANCELED
}

enum PaymentStaus {
  PAID
  UNPAID
}